library(tmap) # Criação de choropleth maps
library(RColorBrewer) # Paleta de cores
library(plm) # Dados em painel
library(stargazer) # Tabelas bem formatadas
# Comando especial ----
`%notin%` <- Negate(`%in%`)
# Função para renderizar figuras em .svg corretamente no LaTeX
show_fig <- function(f) # Fonte: https://stackoverflow.com/a/56044642
{if (knitr::is_latex_output())
{
output = xfun::with_ext(f, 'pdf')
rsvg::rsvg_pdf(xfun::with_ext(f,'svg'), file = output)
} else {
output = xfun::with_ext(f, 'svg')
}
knitr::include_graphics(output)
}
stargazer(didreg_fe, didreg_fe_logit, didreg_fe_entropia,
type = "latex",
title = "Efeito médio de tratamento sobre os tratados - Ciclo 2009-2012",
decimal.mark = ",", digits = 5,
column.labels = c("Diff-diff + FE",
"Diff-diff + FE + PSM (logit)",
"Diff-diff + FE + PSM (entropia)"),
covariate.labels = c("Tempo", "Idade média", "Idade média²",
"Prop. brancos", "Prop. casados", "Prop. homens",
"Prop. ensino medio ou mais", "Prop. renda per capita 3S.M.",
"Tempo x Tratamento"),
model.numbers = FALSE,
initial.zero = TRUE,
dep.var.labels = "ln(Nota média)", dep.var.caption = "Variável dependente",
multicolumn = TRUE, model.names = FALSE, flip = TRUE, align = TRUE,
float = TRUE, float.env = "sidewaystable", header = FALSE)
stargazer
unlink("primeira_parte_cache", recursive = TRUE)
library(shiny); runApp('Exemplos/Shiny/dashboard.R')
runApp('Exemplos/Shiny/dashboard.R')
# Pedro Milreu Cunha - Doutorando em Economia Aplicada pelo PPGE-UFPB #
# Contato: pcunha.2107@gmail.com #
##########################################################################
###################** CURSO DE INTRODUÇÃO A R - LABIMEC **################
##########################################################################
#---- Script de exemplos nº4: TEMAS GRÁFICOS #----
# Bibliotecas ----
library(dplyr) # Manipulação de dados
library(ggplot2)
library(RColorBrewer) # Paleta de cores
df <- data.frame(x = 1:20, y = 1:20)
base <- ggplot(df, aes(x, y)) + geom_point()
b1 <- base + theme_grey() + ggtitle("theme_grey()")
b2 <- base + theme_bw() + ggtitle("theme_bw()")
b3 <- base + theme_linedraw() + ggtitle("theme_linedraw()")
b4 <- base + theme_light() + ggtitle("theme_light()")
b5 <- base + theme_dark() + ggtitle("theme_dark()")
b6 <- base + theme_minimal()  + ggtitle("theme_minimal()")
b7 <- base + theme_classic() + ggtitle("theme_classic()")
b8 <- base + theme_void() + ggtitle("theme_void()")
ggarrange(b1, b2, b3, b4, b5, b6, b7, b8,
nrow = 3, ncol = 3)
# Pedro Milreu Cunha - Doutorando em Economia Aplicada pelo PPGE-UFPB #
# Contato: pcunha.2107@gmail.com #
##########################################################################
###################** CURSO DE INTRODUÇÃO A R - LABIMEC **################
##########################################################################
#---- Script de exemplos nº4: TEMAS GRÁFICOS #----
# Bibliotecas ----
library(dplyr) # Manipulação de dados
library(ggplot2)
library(ggpubr)
df <- data.frame(x = 1:20, y = 1:20)
base <- ggplot(df, aes(x, y)) + geom_point()
b1 <- base + theme_grey() + ggtitle("theme_grey()")
b2 <- base + theme_bw() + ggtitle("theme_bw()")
b3 <- base + theme_linedraw() + ggtitle("theme_linedraw()")
b4 <- base + theme_light() + ggtitle("theme_light()")
b5 <- base + theme_dark() + ggtitle("theme_dark()")
b6 <- base + theme_minimal()  + ggtitle("theme_minimal()")
b7 <- base + theme_classic() + ggtitle("theme_classic()")
b8 <- base + theme_void() + ggtitle("theme_void()")
ggarrange(b1, b2, b3, b4, b5, b6, b7, b8,
nrow = 3, ncol = 3)
novo_tema <- function() {
theme_bw(base_size = 14) +
theme(panel.grid.minor = element_blank(),
plot.title = element_text(face = "bold"),
legend.position = "bottom")
}
n_pessoas <- seq(2, 50, 1)
produtorio <- rep(1, length(n_pessoas))
probabilidades <- rep(1, length(n_pessoas))
for (i in 1:length(n_pessoas)) {
for (j in 1:(n_pessoas[i] - 1)) {
produtorio[i] <- produtorio[i] * (365- j)/365
}
}
probabilidades <- 1 - produtorio
# Gráfico da simulação
dados <- data.frame(n = n_pessoas, p = probabilidades)
dados$satisfazem <- ifelse(dados$p >= 0.5,
"Sim", "Não")
ggplot(dados, aes(x = n, y = p, color = satisfazem, linetype = satisfazem)) +
geom_line(linewidth = 1.25, show.legend = FALSE ) +
geom_hline(yintercept = 0.5, linetype = "dashed", size = 1, color = "black") +
geom_vline(xintercept = 23, linetype = "dashed", size = 1, color = "black") +
labs(x = "Nº de pessoas", y = "Probabilidade", color = "Satisfazem", linetype = "Satisfazem") +
novo_tema()
library(shiny); runApp('Exemplos/Shiny/dashboard.R')
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
# Bibliotecas ----
library(dplyr) # Manipulação de dados
library(readxl) # Importação de arquivos .xlsx
library(ggplot2) # Criação de gráficos
library(ggpubr) # Layout de múltiplos gráficos
library(sf) # Importação e manipulação de dados geográficos (.shp)
library(tmap) # Criação de choropleth maps
library(RColorBrewer) # Paleta de cores
library(plm) # Dados em painel
library(stargazer) # Tabelas bem formatadas
library(showtext) # Fontes extras
font_add_google("EB Garamond", family = "Garamond")
# Comando especial ----
`%notin%` <- Negate(`%in%`)
# Função para renderizar figuras em .svg corretamente no LaTeX
show_fig <- function(f) # Fonte: https://stackoverflow.com/a/56044642
{if (knitr::is_latex_output())
{
output = xfun::with_ext(f, 'pdf')
rsvg::rsvg_pdf(xfun::with_ext(f,'svg'), file = output)
} else {
output = xfun::with_ext(f, 'svg')
}
knitr::include_graphics(output)
}
df <- data.frame(x = 1:20, y = 1:20)
base <- ggplot(df, aes(x, y)) + geom_point()
b1 <- base + theme_grey() + ggtitle("theme_grey()")
b2 <- base + theme_bw() + ggtitle("theme_bw()")
b3 <- base + theme_linedraw() + ggtitle("theme_linedraw()")
b4 <- base + theme_light() + ggtitle("theme_light()")
b5 <- base + theme_dark() + ggtitle("theme_dark()")
b6 <- base + theme_minimal()  + ggtitle("theme_minimal()")
b7 <- base + theme_classic() + ggtitle("theme_classic()")
b8 <- base + theme_void() + ggtitle("theme_void()")
ggarrange(b1, b2, b3, b4, b5, b6, b7, b8,
nrow = 3, ncol = 3)
novo_tema <- function() {
theme_bw(base_size = 14) +
theme(panel.grid.minor = element_blank(),
plot.title = element_text(face = "bold"),
legend.position = "bottom",
text = element_text(family="Garamond"))
}
n_pessoas <- seq(2, 50, 1)
produtorio <- rep(1, length(n_pessoas))
probabilidades <- rep(1, length(n_pessoas))
for (i in 1:length(n_pessoas)) {
for (j in 1:(n_pessoas[i] - 1)) {
produtorio[i] <- produtorio[i] * (365- j)/365
}
}
probabilidades <- 1 - produtorio
# Gráfico da simulação
dados <- data.frame(n = n_pessoas, p = probabilidades)
dados$satisfazem <- ifelse(dados$p >= 0.5,
"Sim", "Não")
ggplot(dados, aes(x = n, y = p, color = satisfazem, linetype = satisfazem)) +
geom_line(linewidth = 1.25, show.legend = FALSE ) +
geom_hline(yintercept = 0.5, linetype = "dashed", size = 1, color = "black") +
geom_vline(xintercept = 23, linetype = "dashed", size = 1, color = "black") +
labs(x = "Nº de pessoas", y = "Probabilidade", color = "Satisfazem", linetype = "Satisfazem")+
novo_tema()
n_pessoas <- seq(2, 50, 1)
produtorio <- rep(1, length(n_pessoas))
probabilidades <- rep(1, length(n_pessoas))
for (i in 1:length(n_pessoas)) {
for (j in 1:(n_pessoas[i] - 1)) {
produtorio[i] <- produtorio[i] * (365- j)/365
}
}
probabilidades <- 1 - produtorio
# Gráfico da simulação
dados <- data.frame(n = n_pessoas, p = probabilidades)
dados$satisfazem <- ifelse(dados$p >= 0.5,
"Sim", "Não")
g <- ggplot(dados, aes(x = n, y = p, color = satisfazem, linetype = satisfazem)) +
geom_line(linewidth = 1.25, show.legend = FALSE ) +
geom_hline(yintercept = 0.5, linetype = "dashed", size = 1, color = "black") +
n_pessoas <- seq(2, 50, 1)
produtorio <- rep(1, length(n_pessoas))
probabilidades <- rep(1, length(n_pessoas))
for (i in 1:length(n_pessoas)) {
for (j in 1:(n_pessoas[i] - 1)) {
produtorio[i] <- produtorio[i] * (365- j)/365
}
}
probabilidades <- 1 - produtorio
# Gráfico da simulação
dados <- data.frame(n = n_pessoas, p = probabilidades)
dados$satisfazem <- ifelse(dados$p >= 0.5,
"Sim", "Não")
g <- ggplot(dados, aes(x = n, y = p, color = satisfazem, linetype = satisfazem)) +
geom_line(linewidth = 1.25, show.legend = FALSE) +
geom_hline(yintercept = 0.5, linetype = "dashed", size = 1, color = "black") +
n_pessoas <- seq(2, 50, 1)
produtorio <- rep(1, length(n_pessoas))
probabilidades <- rep(1, length(n_pessoas))
for (i in 1:length(n_pessoas)) {
for (j in 1:(n_pessoas[i] - 1)) {
produtorio[i] <- produtorio[i] * (365 - j)/365
}
}
probabilidades <- 1 - produtorio
# Gráfico da simulação
dados <- data.frame(n = n_pessoas, p = probabilidades)
dados$satisfazem <- ifelse(dados$p >= 0.5,
"Sim", "Não")
g <- ggplot(dados, aes(x = n, y = p, color = satisfazem, linetype = satisfazem)) +
geom_line(linewidth = 1.25, show.legend = FALSE) +
geom_hline(yintercept = 0.5, linetype = "dashed", size = 1, color = "black") +
n_pessoas <- seq(2, 50, 1)
produtorio <- rep(1, length(n_pessoas))
probabilidades <- rep(1, length(n_pessoas))
for (i in 1:length(n_pessoas)) {
for (j in 1:(n_pessoas[i] - 1)) {
produtorio[i] <- produtorio[i] * (365 - j)/365
}
}
probabilidades <- 1 - produtorio
# Gráfico da simulação
dados <- data.frame(n = n_pessoas, p = probabilidades)
dados$satisfazem <- ifelse(dados$p >= 0.5,
"Sim", "Não")
g <- ggplot(dados, aes(x = n, y = p, color = satisfazem, linetype = satisfazem)) +
geom_line(linewidth = 1.25, show.legend = FALSE) +
geom_hline(yintercept = 0.5, linetype = "dashed", size = 1, color = "black") +
n_pessoas <- seq(2, 50, 1)
produtorio <- rep(1, length(n_pessoas))
probabilidades <- rep(1, length(n_pessoas))
for (i in 1:length(n_pessoas)) {
for (j in 1:(n_pessoas[i] - 1)) {
produtorio[i] <- produtorio[i] * (365 - j)/365
}
}
probabilidades <- 1 - produtorio
# Gráfico da simulação
dados <- data.frame(n = n_pessoas, p = probabilidades)
dados$satisfazem <- ifelse(dados$p >= 0.5,
"Sim", "Não")
g <- ggplot(dados, aes(x = n, y = p, color = satisfazem, linetype = satisfazem)) +geom_line(linewidth = 1.25, show.legend = FALSE) +
geom_hline(yintercept = 0.5, linetype = "dashed", size = 1, color = "black") +
n_pessoas <- seq(2, 50, 1)
produtorio <- rep(1, length(n_pessoas))
probabilidades <- rep(1, length(n_pessoas))
for (i in 1:length(n_pessoas)) {
for (j in 1:(n_pessoas[i] - 1)) {
produtorio[i] <- produtorio[i] * (365 - j)/365
}
}
probabilidades <- 1 - produtorio
# Gráfico da simulação
dados <- data.frame(n = n_pessoas, p = probabilidades)
dados$satisfazem <- ifelse(dados$p >= 0.5,
"Sim", "Não")
ggplot(dados, aes(x = n, y = p, color = satisfazem, linetype = satisfazem)) +
geom_line(linewidth = 1.25, show.legend = FALSE ) +
geom_hline(yintercept = 0.5, linetype = "dashed", size = 1, color = "black") +
n_pessoas <- seq(2, 50, 1)
produtorio <- rep(1, length(n_pessoas))
probabilidades <- rep(1, length(n_pessoas))
for (i in 1:length(n_pessoas)) {
for (j in 1:(n_pessoas[i] - 1)) {
produtorio[i] <- produtorio[i] * (365 - j)/365
}
}
probabilidades <- 1 - produtorio
# Gráfico da simulação
dados <- data.frame(n = n_pessoas, p = probabilidades)
dados$satisfazem <- ifelse(dados$p >= 0.5,
"Sim", "Não")
g <- ggplot(dados, aes(x = n, y = p, color = satisfazem, linetype = satisfazem)) +
geom_line(linewidth = 1.25, show.legend = FALSE) +
geom_hline(yintercept = 0.5, linetype = "dashed", size = 1) +
n_pessoas <- seq(2, 50, 1)
produtorio <- rep(1, length(n_pessoas))
probabilidades <- rep(1, length(n_pessoas))
for (i in 1:length(n_pessoas)) {
for (j in 1:(n_pessoas[i] - 1)) {
produtorio[i] <- produtorio[i] * (365 - j)/365
}
}
probabilidades <- 1 - produtorio
# Gráfico da simulação
dados <- data.frame(n = n_pessoas, p = probabilidades)
dados$satisfazem <- ifelse(dados$p >= 0.5,
"Sim", "Não")
g <- ggplot(dados, aes(x = n, y = p, color = satisfazem, linetype = satisfazem)) +
geom_line(linewidth = 1.25, show.legend = FALSE) +
geom_hline(yintercept = 0.5, linetype = "dashed", size = 1) +
n_pessoas <- seq(2, 50, 1)
produtorio <- rep(1, length(n_pessoas))
probabilidades <- rep(1, length(n_pessoas))
for (i in 1:length(n_pessoas)) {
for (j in 1:(n_pessoas[i] - 1)) {
produtorio[i] <- produtorio[i] * (365 - j)/365
}
}
probabilidades <- 1 - produtorio
# Gráfico da simulação
dados <- data.frame(n = n_pessoas, p = probabilidades)
dados$satisfazem <- ifelse(dados$p >= 0.5, "Sim", "Não")
g <- ggplot(dados, aes(x = n, y = p, color = satisfazem, linetype = satisfazem)) +
geom_line(linewidth = 1.25, show.legend = FALSE) +
geom_hline(yintercept = 0.5, linetype = "dashed", size = 1) +
n_pessoas <- seq(2, 50, 1)
produtorio <- rep(1, length(n_pessoas))
probabilidades <- rep(1, length(n_pessoas))
for (i in 1:length(n_pessoas)) {
for (j in 1:(n_pessoas[i] - 1)) {
produtorio[i] <- produtorio[i] * (365 - j)/365
}
}
probabilidades <- 1 - produtorio
# Gráfico da simulação
dados <- data.frame(n = n_pessoas, p = probabilidades)
dados$satisfazem <- ifelse(dados$p >= 0.5, "Sim", "Não")
g <- ggplot(dados, aes(x = n, y = p, color = satisfazem, linetype = satisfazem)) +
geom_line(linewidth = 1.25, show.legend = FALSE) +
geom_hline(yintercept = 0.5, linetype = "dashed", size = 1) +
n_pessoas <- seq(2, 50, 1)
produtorio <- rep(1, length(n_pessoas))
probabilidades <- rep(1, length(n_pessoas))
for (i in 1:length(n_pessoas)) {
for (j in 1:(n_pessoas[i] - 1)) {
produtorio[i] <- produtorio[i] * (365 - j)/365
}
}
probabilidades <- 1 - produtorio
# Gráfico da simulação
dados <- data.frame(n = n_pessoas, p = probabilidades)
dados$satisfazem <- ifelse(dados$p >= 0.5, "Sim", "Nao")
g <- ggplot(dados, aes(x = n, y = p, color = satisfazem, linetype = satisfazem)) +
geom_line(linewidth = 1.25, show.legend = FALSE) +
geom_hline(yintercept = 0.5, linetype = "dashed", size = 1) +
geom_vline(xintercept = 23, linetype = "dashed", size = 1) +
labs(x = "Nº de pessoas", y = "Probabilidade", color = "Satisfazem", linetype = "Satisfazem")
g + novo_tema()
n_pessoas <- seq(2, 50, 1)
produtorio <- rep(1, length(n_pessoas))
probabilidades <- rep(1, length(n_pessoas))
for (i in 1:length(n_pessoas)) {
for (j in 1:(n_pessoas[i] - 1)) {
produtorio[i] <- produtorio[i] * (365 - j)/365
}
}
probabilidades <- 1 - produtorio
# Gráfico da simulação
dados <- data.frame(n = n_pessoas, p = probabilidades)
dados$satisfazem <- ifelse(dados$p >= 0.5, "S", "N")
g <- ggplot(dados, aes(x = n, y = p, color = satisfazem, linetype = satisfazem)) +
geom_line(linewidth = 1.25, show.legend = FALSE) +
geom_hline(yintercept = 0.5, linetype = "dashed", size = 1) +
geom_vline(xintercept = 23, linetype = "dashed", size = 1) +
labs(x = "Nº de pessoas", y = "Probabilidade", color = "Satisfazem", linetype = "Satisfazem")
g + novo_tema()
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
# Bibliotecas ----
library(dplyr) # Manipulação de dados
library(readxl) # Importação de arquivos .xlsx
library(ggplot2) # Criação de gráficos
library(ggpubr) # Layout de múltiplos gráficos
library(sf) # Importação e manipulação de dados geográficos (.shp)
library(tmap) # Criação de choropleth maps
library(RColorBrewer) # Paleta de cores
library(plm) # Dados em painel
library(stargazer) # Tabelas bem formatadas
library(showtext)
font_add_google("Garamond EB", "Garamond")
# Pedro Milreu Cunha - Doutorando em Economia Aplicada pelo PPGE-UFPB #
# Contato: pcunha.2107@gmail.com #
##########################################################################
###################** CURSO DE INTRODUÇÃO A R - LABIMEC **################
##########################################################################
#---- Script de exemplos nº1: MAPAS #----
# Bibliotecas ----
library(dplyr) # Manipulação de dados
library(readxl) # Importação de arquivos .xlsx
library(sf) # Importação e manipulação de dados geográficos (.shp)
library(tmap) # Criação de choropleth maps
library(RColorBrewer) # Paleta de cores
library(showtext)
font_add_google("EB Garamond", "Garamond")
showtext_auto()
# Comando especial ----
`%notin%` <- Negate(`%in%`)
# Importação dos dados geográficos ----
dados_geo <- st_read("data/shapefiles/BR_UF_2021.shp")
dados_geo$Sigla_UF <- c("RO", "AC", "AM", "RR", "PA", "AP",
"TO", "MA", "PI", "CE", "RN", "PB",
"PE", "AL", "SE", "BA", "MG", "ES",
"RJ", "SP", "PR", "SC", "RS", "MS",
"MT", "GO", "DF")
# Importação dos dados sobre subnotificações de estupros ----
# (exemplo retirado da minha dissertação de mestrado)
dados_sub <- read_excel("data/sub_estimadas_estupros.xlsx") %>%
select(Sigla_UF, sub_lag_end) %>%
group_by(Sigla_UF) %>%
mutate(sub_lag_end = mean(sub_lag_end, na.rm = TRUE)) %>%
unique()
for (uf in dados_geo$Sigla_UF) {
if (uf %notin% dados_sub$Sigla_UF) {
dados_sub[nrow(dados_sub) + 1, ] <- list(uf, NaN)
}
}
# União dos dados ----
dados <- dados_geo %>%
left_join(dados_sub, by = "Sigla_UF")
# Criação do mapa ----
mapa <- tm_shape(dados) +
tm_borders(lwd = 0.55) +
tm_fill("sub_lag_end",
title = "",
textNA = "Dado ausente",
colorNA = "lightgrey", palette = "GnBu",
labels = c("< 10%", "10% - 20%",
"20% - 30%", "30% - 40%",
"40% - 50%", "50% - 60%",
"60% - 70%")) +
tm_text("Sigla_UF", size = 0.65, fontfamily = "Garamond",
fontface = "bold", col = "black") +
tm_credits("Nota: Média do período jan/2012 - dez/2020.",
fontface = "italic", size = 0.7, fontfamily = "Garamond",
align = "right") +
tm_credits("Fonte: Elaboração própria a partir dos dados das SSPs.",
size = 0.8, align = "right", fontfamily = "Garamond") +
tm_layout(main.title = paste("Distribuição espacial da subnotificação",
"de estupros de mulheres no Brasil",
sep = "\n"),
title.size = 1,
main.title.position = "center", fontfamily = "Garamond",
main.title.fontface = "italic", scale = 1, frame = FALSE,
legend.title.size = 1.5, legend.text.size = 0.8,
legend.outside.position = c("left", "bottom"))
mapa
warnings()
# Pedro Milreu Cunha - Doutorando em Economia Aplicada pelo PPGE-UFPB #
# Contato: pcunha.2107@gmail.com #
##########################################################################
###################** CURSO DE INTRODUÇÃO A R - LABIMEC **################
##########################################################################
#---- Script de exemplos nº1: MAPAS #----
# Bibliotecas ----
library(dplyr) # Manipulação de dados
library(readxl) # Importação de arquivos .xlsx
library(sf) # Importação e manipulação de dados geográficos (.shp)
library(tmap) # Criação de choropleth maps
library(RColorBrewer) # Paleta de cores
library(showtext)
font_add_google("EB Garamond", "Garamond")
showtext_auto()
# Comando especial ----
`%notin%` <- Negate(`%in%`)
# Importação dos dados geográficos ----
dados_geo <- st_read("data/shapefiles/BR_UF_2021.shp")
dados_geo$Sigla_UF <- c("RO", "AC", "AM", "RR", "PA", "AP",
"TO", "MA", "PI", "CE", "RN", "PB",
"PE", "AL", "SE", "BA", "MG", "ES",
"RJ", "SP", "PR", "SC", "RS", "MS",
"MT", "GO", "DF")
# Importação dos dados sobre subnotificações de estupros ----
# (exemplo retirado da minha dissertação de mestrado)
dados_sub <- read_excel("data/sub_estimadas_estupros.xlsx") %>%
select(Sigla_UF, sub_lag_end) %>%
group_by(Sigla_UF) %>%
mutate(sub_lag_end = mean(sub_lag_end, na.rm = TRUE)) %>%
unique()
for (uf in dados_geo$Sigla_UF) {
if (uf %notin% dados_sub$Sigla_UF) {
dados_sub[nrow(dados_sub) + 1, ] <- list(uf, NaN)
}
}
# União dos dados ----
dados <- dados_geo %>%
left_join(dados_sub, by = "Sigla_UF")
# Criação do mapa ----
mapa <- tm_shape(dados) +
tm_borders(lwd = 0.55) +
tm_fill("sub_lag_end",
title = "",
textNA = "Dado ausente",
colorNA = "lightgrey", palette = "GnBu",
labels = c("< 10%", "10% - 20%",
"20% - 30%", "30% - 40%",
"40% - 50%", "50% - 60%",
"60% - 70%")) +
tm_text("Sigla_UF", size = 0.65, fontfamily = "Garamond",
fontface = "bold", col = "black") +
tm_credits("Nota: Média do período jan/2012 - dez/2020.",
fontface = "italic", size = 0.7, fontfamily = "Garamond",
align = "right") +
tm_credits("Fonte: Elaboração própria a partir dos dados das SSPs.",
size = 0.8, align = "right", fontfamily = "Garamond") +
tm_layout(main.title = paste("Distribuição espacial da subnotificação",
"de estupros de mulheres no Brasil",
sep = "\n"),
title.size = 1,
main.title.position = "center", fontfamily = "Garamond",
main.title.fontface = "italic", scale = 1, frame = FALSE,
legend.title.size = 1.5, legend.text.size = 0.8,
legend.outside.position = c("left", "bottom"))
mapa
tmap_save(mapa, "figures/mapa_sub_estupros.svg",
width = 12, height = 12, units = "cm")
